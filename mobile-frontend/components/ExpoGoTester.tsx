import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Alert,
  TextInput,
} from 'react-native';
import * as Clipboard from 'expo-clipboard';
import { useSQLiteContext } from 'expo-sqlite';
import Constants from 'expo-constants';

export default function ExpoGoTester() {
  const [messageId, setMessageId] = useState('123');
  const [studentId, setStudentId] = useState('10');
  const [ipAddress, setIpAddress] = useState('10.20.0.42');
  const [linkType, setLinkType] = useState<
    'message' | 'student' | 'home' | 'settings'
  >('message');
  const db = useSQLiteContext();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ö–µ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Å–±–æ—Ä–∫–∏
  const getCustomScheme = () => {
    // –í development mode –∏—Å–ø–æ–ª—å–∑—É–µ–º expo —Å—Ö–µ–º—É
    if (__DEV__) {
      return Constants.expoConfig?.scheme || 'jduapp-dev';
    }

    // –î–ª—è production —Å–±–æ—Ä–∫–∏
    const variant = process.env.APP_VARIANT || 'production';
    switch (variant) {
      case 'development':
        return 'jduapp-dev';
      case 'preview':
        return 'jduapp-preview';
      case 'production':
        return 'jduapp';
      default:
        return 'jduapp-dev';
    }
  };

  const loadRandomStudentId = async () => {
    try {
      const allStudents = await db.getAllAsync<{
        id: number;
        given_name: string;
        family_name: string;
      }>(
        'SELECT id, given_name, family_name FROM student ORDER BY id DESC LIMIT 10'
      );

      if (allStudents && allStudents.length > 0) {
        const studentList = allStudents
          .map(
            student =>
              `ID: ${student.id} - ${student.given_name} ${student.family_name}`
          )
          .join('\n');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        setStudentId(allStudents[0].id.toString());

        Alert.alert(
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã',
          `–ù–∞–π–¥–µ–Ω–æ ${allStudents.length} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n${studentList}\n\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID: ${allStudents[0].id}`,
          [{ text: 'OK' }]
        );
        return;
      }

      Alert.alert(
        '–û—à–∏–±–∫–∞',
        '–°—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.'
      );
    } catch (error) {
      console.error('Error loading student ID:', error);
      Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: ${error}`);
    }
  };

  const loadRandomMessageId = async () => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID
      const allMessages = await db.getAllAsync<{ id: number; title: string }>(
        'SELECT id, title FROM message ORDER BY id DESC LIMIT 10'
      );

      if (allMessages && allMessages.length > 0) {
        const messageList = allMessages
          .map(msg => `ID: ${msg.id} - ${msg.title}`)
          .join('\n');

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        setMessageId(allMessages[0].id.toString());

        Alert.alert(
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
          `–ù–∞–π–¥–µ–Ω–æ ${allMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n${messageList}\n\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID: ${allMessages[0].id}`,
          [{ text: 'OK' }]
        );
        return;
      }

      // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
      const students = await db.getAllAsync<{ id: number; given_name: string }>(
        'SELECT id, given_name FROM student LIMIT 5'
      );

      if (students && students.length > 0) {
        const studentList = students
          .map(s => `ID: ${s.id} - ${s.given_name}`)
          .join('\n');
        Alert.alert(
          '–ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è',
          `–ù–∞–π–¥–µ–Ω—ã —Å—Ç—É–¥–µ–Ω—Ç—ã:\n${studentList}\n\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π\n2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞\n3. –ü–æ—Ç—è–Ω–∏—Ç–µ –≤–Ω–∏–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞`
        );
      } else {
        Alert.alert(
          '–û—à–∏–±–∫–∞',
          '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ. –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.'
        );
      }
    } catch (error) {
      console.error('Error loading message ID:', error);
      Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error}`);
    }
  };

  const checkDatabaseStatus = async () => {
    try {
      const messageCount = await db.getFirstAsync<{ count: number }>(
        'SELECT COUNT(*) as count FROM message'
      );
      const studentCount = await db.getFirstAsync<{ count: number }>(
        'SELECT COUNT(*) as count FROM student'
      );

      const recentMessages = await db.getAllAsync<{
        id: number;
        title: string;
        sent_time: string;
      }>(
        'SELECT id, title, sent_time FROM message ORDER BY sent_time DESC LIMIT 5'
      );

      let statusText = `–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:\n`;
      statusText += `üìß –°–æ–æ–±—â–µ–Ω–∏–π: ${messageCount?.count || 0}\n`;
      statusText += `üë§ –°—Ç—É–¥–µ–Ω—Ç–æ–≤: ${studentCount?.count || 0}\n\n`;

      if (recentMessages.length > 0) {
        statusText += `–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n`;
        recentMessages.forEach(msg => {
          statusText += `‚Ä¢ ID: ${msg.id} - ${msg.title.substring(0, 30)}...\n`;
        });
      } else {
        statusText += `‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n\n`;
        statusText += `–†–µ—à–µ–Ω–∏–µ:\n`;
        statusText += `1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n`;
        statusText += `2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç\n`;
        statusText += `3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞\n`;
        statusText += `4. –ü–æ—Ç—è–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–Ω–∏–∑ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`;
      }

      Alert.alert('–°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', statusText);
    } catch (error) {
      Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É: ${error}`);
    }
  };

  const showIPInstructions = () => {
    const instructions = `
–ö–∞–∫ –Ω–∞–π—Ç–∏ –≤–∞—à IP –∞–¥—Ä–µ—Å:

1Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: npx expo start
2Ô∏è‚É£ –í —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –Ω–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É:
   "Metro waiting on exp://YOUR_IP:8081"
3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ IP –∞–¥—Ä–µ—Å –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤—ã—à–µ

üîÑ –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "Network" –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ

‚ö†Ô∏è –í–ê–ñ–ù–û:
   ‚Ä¢ Expo Go –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
   ‚Ä¢ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–æ –≤ Expo Go
   ‚Ä¢ IP –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
    `;

    Alert.alert('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', instructions);
  };

  const generateDeepLinks = () => {
    const msgId = parseInt(messageId) || 123;
    const studId = parseInt(studentId) || 10;
    const customScheme = getCustomScheme();

    if (linkType === 'home') {
      // –°—Å—ã–ª–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      return {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è Expo Go
        expoGoSimple: `exp://${ipAddress}:8081/--/?page=home`,
        expoGoParams: `exp://${ipAddress}:8081/--/?type=home`,

        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
        expoGo: `exp://${ipAddress}:8081/--/`,
        expoGoStudentFormat: `exp://${ipAddress}:8081/--/home`,

        // Custom Scheme URLs (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ö–µ–º—É)
        dev: `${customScheme}://`,
        devStudentFormat: `${customScheme}://home`,
      };
    } else if (linkType === 'settings') {
      return {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è Expo Go
        expoGoSimple: `exp://${ipAddress}:8081/--/?page=settings`,
        expoGoParams: `exp://${ipAddress}:8081/--/?type=settings`,

        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
        expoGo: `exp://${ipAddress}:8081/--/settings`,
        expoGoStudentFormat: `exp://${ipAddress}:8081/--/settings`,

        // Custom Scheme URLs
        dev: `${customScheme}://settings`,
        devStudentFormat: `${customScheme}://settings`,
      };
    } else if (linkType === 'student') {
      // –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç—É–¥–µ–Ω—Ç–∞
      return {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è Expo Go
        expoGoSimple: `exp://${ipAddress}:8081/--/?studentPage=${studId}`,
        expoGoParams: `exp://${ipAddress}:8081/--/?type=student&id=${studId}`,

        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
        expoGo: `exp://${ipAddress}:8081/--/student/${studId}`,
        expoGoStudentFormat: `exp://${ipAddress}:8081/--/student/${studId}`,

        // Custom Scheme URLs
        dev: `${customScheme}://student/${studId}`,
        devStudentFormat: `${customScheme}://student/${studId}`,
      };
    } else {
      // –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ (—Ç–µ–∫—É—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
      return {
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è Expo Go
        expoGoSimple: `exp://${ipAddress}:8081/--/?student=${msgId}`,
        expoGoParams: `exp://${ipAddress}:8081/--/?messageId=${msgId}&studentId=${studId}`,

        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã (–º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
        expoGo: `exp://${ipAddress}:8081/--/student/message/${msgId}`,
        expoGoStudentFormat: `exp://${ipAddress}:8081/--/student/${studId}/message/${msgId}`,

        // Custom Scheme URLs
        dev: `${customScheme}://student/message/${msgId}`,
        devStudentFormat: `${customScheme}://student/${studId}/message/${msgId}`,
      };
    }
  };

  const copyToClipboard = async (text: string, label: string) => {
    await Clipboard.setStringAsync(text);
    Alert.alert('–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!', `${label} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`);
  };

  if (!__DEV__) {
    return null;
  }

  const customScheme = getCustomScheme();
  const links = generateDeepLinks();

  return (
    <View style={styles.container}>
      <Text style={styles.title}>üåê External Deep Link Testing</Text>

      {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Å—ã–ª–∫–∏ */}
      <View style={styles.inputContainer}>
        <Text style={styles.inputLabel}>–¢–∏–ø —Å—Å—ã–ª–∫–∏:</Text>
        <View style={styles.toggleContainer}>
          <TouchableOpacity
            style={[
              styles.toggleButton,
              linkType === 'home' && styles.toggleButtonActive,
            ]}
            onPress={() => setLinkType('home')}
          >
            <Text
              style={[
                styles.toggleButtonText,
                linkType === 'home' && styles.toggleButtonTextActive,
              ]}
            >
              üè† –ì–ª–∞–≤–Ω–∞—è
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[
              styles.toggleButton,
              linkType === 'settings' && styles.toggleButtonActive,
            ]}
            onPress={() => setLinkType('settings')}
          >
            <Text
              style={[
                styles.toggleButtonText,
                linkType === 'settings' && styles.toggleButtonTextActive,
              ]}
            >
              ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            </Text>
          </TouchableOpacity>
        </View>
        <View style={styles.toggleContainer}>
          <TouchableOpacity
            style={[
              styles.toggleButton,
              linkType === 'message' && styles.toggleButtonActive,
            ]}
            onPress={() => setLinkType('message')}
          >
            <Text
              style={[
                styles.toggleButtonText,
                linkType === 'message' && styles.toggleButtonTextActive,
              ]}
            >
              üìß –°–æ–æ–±—â–µ–Ω–∏–µ
            </Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[
              styles.toggleButton,
              linkType === 'student' && styles.toggleButtonActive,
            ]}
            onPress={() => setLinkType('student')}
          >
            <Text
              style={[
                styles.toggleButtonText,
                linkType === 'student' && styles.toggleButtonTextActive,
              ]}
            >
              üë§ –°—Ç—É–¥–µ–Ω—Ç
            </Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* –ü–æ–ª—è –≤–≤–æ–¥–∞ */}
      {linkType === 'home' && (
        <View style={styles.inputContainer}>
          <Text style={styles.inputLabel}>üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</Text>
          <Text style={styles.info}>
            –°—Å—ã–ª–∫–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          </Text>
        </View>
      )}

      {linkType === 'settings' && (
        <View style={styles.inputContainer}>
          <Text style={styles.inputLabel}>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</Text>
          <Text style={styles.info}>
            –°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          </Text>
        </View>
      )}

      {linkType === 'message' && (
        <View style={styles.inputContainer}>
          <Text style={styles.inputLabel}>Message ID:</Text>
          <View style={styles.inputRow}>
            <TextInput
              style={[styles.input, { flex: 1 }]}
              value={messageId}
              onChangeText={setMessageId}
              placeholder='–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è'
              keyboardType='numeric'
            />
            <TouchableOpacity
              style={styles.loadButton}
              onPress={loadRandomMessageId}
            >
              <Text style={styles.loadButtonText}>üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.loadButton, { backgroundColor: '#ff9800' }]}
              onPress={checkDatabaseStatus}
            >
              <Text style={styles.loadButtonText}>üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ë–î</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}

      {linkType === 'student' && (
        <View style={styles.inputContainer}>
          <Text style={styles.inputLabel}>Student ID:</Text>
          <View style={styles.inputRow}>
            <TextInput
              style={[styles.input, { flex: 1 }]}
              value={studentId}
              onChangeText={setStudentId}
              placeholder='–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞'
              keyboardType='numeric'
            />
            <TouchableOpacity
              style={styles.loadButton}
              onPress={loadRandomStudentId}
            >
              <Text style={styles.loadButtonText}>üë§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}

      <View style={styles.inputContainer}>
        <Text style={styles.inputLabel}>IP Address:</Text>
        <View style={styles.inputRow}>
          <TextInput
            style={[styles.input, { flex: 1 }]}
            value={ipAddress}
            onChangeText={setIpAddress}
            placeholder='–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å'
          />
          <TouchableOpacity
            style={styles.helpButton}
            onPress={showIPInstructions}
          >
            <Text style={styles.helpButtonText}>‚ÑπÔ∏è</Text>
          </TouchableOpacity>
        </View>
      </View>

      <Text style={styles.info}>üìñ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π:</Text>
      <Text style={styles.info}>1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π</Text>
      <Text style={styles.info}>
        2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ &ldquo;–û–±–Ω–æ–≤–∏—Ç—å&rdquo; —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
      </Text>
      <Text style={styles.info}>
        3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ &ldquo;üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î&rdquo;
      </Text>
      <Text style={styles.info}>
        üîç –ù–∞–π–¥–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ: Metro waiting on exp://YOUR_IP:8081
      </Text>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>
          ‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ Expo Go Links (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        </Text>

        <TouchableOpacity
          style={styles.linkButton}
          onPress={() => copyToClipboard(links.expoGoSimple, 'Expo Go Simple')}
        >
          <Text style={styles.linkLabel}>Simple Format (Query Params)</Text>
          <Text style={styles.linkUrl} numberOfLines={1}>
            {links.expoGoSimple}
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.linkButton}
          onPress={() => copyToClipboard(links.expoGoParams, 'Expo Go Params')}
        >
          <Text style={styles.linkLabel}>With Parameters</Text>
          <Text style={styles.linkUrl} numberOfLines={1}>
            {links.expoGoParams}
          </Text>
        </TouchableOpacity>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>
          ‚ö†Ô∏è –°–ª–æ–∂–Ω—ã–µ Expo Go Links (–ú–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)
        </Text>

        <TouchableOpacity
          style={[styles.linkButton, styles.warningButton]}
          onPress={() => copyToClipboard(links.expoGo, 'Expo Go Full Path')}
        >
          <Text style={styles.linkLabel}>Full Path Format</Text>
          <Text style={styles.linkUrl} numberOfLines={1}>
            {links.expoGo}
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.linkButton, styles.warningButton]}
          onPress={() =>
            copyToClipboard(links.expoGoStudentFormat, 'Expo Go Student Format')
          }
        >
          <Text style={styles.linkLabel}>Student Format</Text>
          <Text style={styles.linkUrl} numberOfLines={1}>
            {links.expoGoStudentFormat}
          </Text>
        </TouchableOpacity>
      </View>

      <View style={styles.section}>
        <Text style={styles.sectionTitle}>
          üîß Custom Scheme URLs ({customScheme}://)
        </Text>

        <TouchableOpacity
          style={styles.linkButton}
          onPress={() => copyToClipboard(links.dev, 'Dev URL')}
        >
          <Text style={styles.linkLabel}>Basic Dev Format</Text>
          <Text style={styles.linkUrl} numberOfLines={1}>
            {links.dev}
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.linkButton}
          onPress={() =>
            copyToClipboard(links.devStudentFormat, 'Dev Student Format')
          }
        >
          <Text style={styles.linkLabel}>Dev Student Format</Text>
          <Text style={styles.linkUrl} numberOfLines={1}>
            {links.devStudentFormat}
          </Text>
        </TouchableOpacity>
      </View>

      <TouchableOpacity
        style={styles.instructionButton}
        onPress={showIPInstructions}
      >
        <Text style={styles.instructionButtonText}>
          üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        </Text>
      </TouchableOpacity>

      <Text style={styles.note}>
        üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Expo Go
      </Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 15,
    backgroundColor: '#e3f2fd',
    margin: 10,
    borderRadius: 8,
    borderWidth: 2,
    borderColor: '#2196f3',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#0d47a1',
    textAlign: 'center',
  },
  info: {
    fontSize: 12,
    color: '#1565c0',
    marginBottom: 5,
  },
  section: {
    marginTop: 15,
    marginBottom: 10,
  },
  sectionTitle: {
    fontSize: 14,
    fontWeight: '600',
    marginBottom: 10,
    color: '#0d47a1',
  },
  linkButton: {
    backgroundColor: 'rgba(33, 150, 243, 0.1)',
    padding: 12,
    borderRadius: 6,
    marginBottom: 8,
    borderWidth: 1,
    borderColor: '#2196f3',
  },
  warningButton: {
    backgroundColor: 'rgba(255, 152, 0, 0.1)',
    borderColor: '#ff9800',
  },
  linkLabel: {
    fontSize: 12,
    fontWeight: '600',
    color: '#0d47a1',
    marginBottom: 4,
  },
  linkUrl: {
    fontSize: 10,
    fontFamily: 'monospace',
    color: '#1565c0',
    backgroundColor: 'white',
    padding: 4,
    borderRadius: 3,
  },
  instructionButton: {
    backgroundColor: '#2196f3',
    padding: 12,
    borderRadius: 6,
    marginTop: 10,
    alignItems: 'center',
  },
  instructionButtonText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 14,
  },
  note: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
    marginTop: 10,
    fontStyle: 'italic',
  },
  inputContainer: {
    marginBottom: 10,
  },
  inputLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: '#0d47a1',
    marginBottom: 5,
  },
  input: {
    borderWidth: 1,
    borderColor: '#2196f3',
    borderRadius: 6,
    padding: 8,
    backgroundColor: 'white',
    fontSize: 14,
  },
  inputRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  loadButton: {
    backgroundColor: '#4caf50',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
  },
  loadButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: '600',
  },
  helpButton: {
    backgroundColor: '#2196f3',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
    minWidth: 40,
    alignItems: 'center',
  },
  helpButtonText: {
    color: 'white',
    fontSize: 16,
  },
  toggleContainer: {
    flexDirection: 'row',
    backgroundColor: '#f5f5f5',
    borderRadius: 6,
    padding: 2,
  },
  toggleButton: {
    flex: 1,
    paddingVertical: 8,
    paddingHorizontal: 12,
    borderRadius: 4,
    alignItems: 'center',
  },
  toggleButtonActive: {
    backgroundColor: '#2196f3',
  },
  toggleButtonText: {
    fontSize: 14,
    color: '#666',
    fontWeight: '600',
  },
  toggleButtonTextActive: {
    color: 'white',
  },
});
